name: Big Data Migrator CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10"]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 mypy

    - name: Create test environment
      run: |
        cp env_example.txt .env
        mkdir -p temp conversations uploads exports logs
        
    - name: Code quality checks
      run: |
        # Code formatting check
        black --check --diff .
        
        # Linting
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type checking
      run: |
        mypy app/ --ignore-missing-imports

    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Setup test environment
      run: |
        cp env_example.txt .env
        mkdir -p temp conversations uploads exports logs
        echo "ENABLE_MULTI_LLM=false" >> .env
        echo "PRIMARY_LLM=local" >> .env

    - name: Start API server
      run: |
        python start_api.py &
        sleep 10
        
    - name: Test API endpoints
      run: |
        # Health check
        curl -f http://localhost:8000/health
        
        # Memory status
        curl -f http://localhost:8000/memory-status
        
        # Debug endpoints
        curl -f http://localhost:8000/debug/system-performance

    - name: Run integration tests
      run: |
        python test_api_vs_direct.py || true
        python verify_startup.py

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt

    - name: Run Bandit security check
      run: |
        pip install bandit
        bandit -r app/ -f json -o bandit-report.json || true

  build-docker:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          bigdatamigrator/app:latest
          bigdatamigrator/app:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, integration-test, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - uses: actions/checkout@v3

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, integration-test, security-scan, build-docker]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v3

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here

  create-release:
    runs-on: ubuntu-latest
    needs: [test, integration-test, security-scan]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')

    steps:
    - uses: actions/checkout@v3

    - name: Get version
      id: get_version
      run: |
        VERSION=$(grep -oP "Version.*: \K\d+\.\d+\.\d+" README.md | head -1)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: Big Data Migrator v${{ steps.get_version.outputs.version }}
        body: |
          ## What's New in v${{ steps.get_version.outputs.version }}
          
          ### ðŸŽ‰ Major Features
          - Multi-LLM consensus system with intelligent provider selection
          - Smart Query Processor for direct data calculations
          - Real-time monitoring and debug capabilities
          - Advanced timeout management with memory optimization
          
          ### ðŸ”§ Improvements
          - 95% reduction in timeout failures
          - 70% reduction in prompt size for multi-file analysis
          - Complete resolution of consensus generation issues
          - Enhanced data access with safety checks
          
          ### ðŸ“Š Performance
          - <5% timeout rate (down from 80%)
          - 15-45s processing time for complex queries
          - Real-time memory monitoring and optimization
          - Production-ready stability
          
          See [CHANGELOG.md](CHANGELOG.md) for complete details.
        draft: false
        prerelease: false 